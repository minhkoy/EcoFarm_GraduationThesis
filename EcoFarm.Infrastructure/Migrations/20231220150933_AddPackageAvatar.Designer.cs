// <auto-generated />
using System;
using EcoFarm.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoFarm.Infrastructure.Migrations
{
    [DbContext(typeof(EcoContext))]
    [Migration("20231220150933_AddPackageAvatar")]
    partial class AddPackageAvatar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoFarm.Domain.Entities.ActivityMedia", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ACTIVITY_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("IMAGE_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMAGE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MEDIA_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ACTIVITY_ID");

                    b.ToTable("ACTIVITY_MEDIA");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.Account", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("ACCOUNT_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("AVATAR_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HASHED_PASSWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_EMAIL_CONFIRMED")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LAST_LOGGED_IN")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LAST_LOGGED_OUT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LATEST_GENERATED_TOKEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LOCKED_REASON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SALT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USERNAME")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("USERNAME")
                        .IsUnique()
                        .HasFilter("[USERNAME] IS NOT NULL");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.AccountVerify", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ACCOUNT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_VERIFIED")
                        .HasColumnType("bit");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("VERIFY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VERIFY_EXPIRE_TIME")
                        .HasColumnType("datetime2");

                    b.Property<int>("VERIFY_REASON")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VERIFY_REQUEST_TIME")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("ACCOUNT_VERIFY");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.Role", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.ToTable("ROLE");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.RoleUser", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("ROLE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ROLE_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("ROLE_USER");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ACCOUNT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<DateTime?>("DATE_OF_BIRTH")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GENDER")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PHONE_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ACCOUNT_ID")
                        .IsUnique()
                        .HasFilter("[ACCOUNT_ID] IS NOT NULL");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.CartDetail", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CART_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<int?>("CURRENCY")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PRODUCT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("CART_ID");

                    b.HasIndex("PRODUCT_ID");

                    b.ToTable("CART_DETAIL");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackage", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("APPROVE_OR_REJECT_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("APPROVE_OR_REJECT_TIME")
                        .HasColumnType("datetime2");

                    b.Property<string>("AVATAR_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CLOSE_REGISTER_TIME")
                        .HasColumnType("datetime2");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<int>("CURRENCY")
                        .HasColumnType("int");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("END_TIME")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ESTIMATED_END_TIME")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ESTIMATED_START_TIME")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_AUTO_CLOSE_REGISTER")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int>("NUMBERS_OF_RATING")
                        .HasColumnType("int");

                    b.Property<int>("PACKAGE_TYPE")
                        .HasColumnType("int");

                    b.Property<decimal>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QUANTITY_REGISTERED")
                        .HasColumnType("int");

                    b.Property<int?>("QUANTITY_START")
                        .HasColumnType("int");

                    b.Property<string>("REJECT_REASON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SELLER_ENTERPRISE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("START_TIME")
                        .HasColumnType("datetime2");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<long>("TOTAL_RATING_POINTS")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("SELLER_ENTERPRISE_ID");

                    b.ToTable("FARMING_PACKAGE");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackageActivity", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("PACKAGE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SHORT_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("PACKAGE_ID");

                    b.ToTable("FARMING_PACKAGE_ACTIVITY");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Notification", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int?>("ACTION_TYPE")
                        .HasColumnType("int");

                    b.Property<string>("CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("FROM_ACCOUNT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FROM_ACCOUNT_TYPE")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<int?>("OBJECT_TYPE")
                        .HasColumnType("int");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("FROM_ACCOUNT_ID");

                    b.ToTable("NOTIFICATION");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.NotificationAccount", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_READ")
                        .HasColumnType("bit");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NOTIFICATION_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TO_ACCOUNT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TO_ACCOUNT_TYPE")
                        .HasColumnType("int");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("NOTIFICATION_ID");

                    b.HasIndex("TO_ACCOUNT_ID");

                    b.ToTable("NOTIFICATION_ACCOUNT");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Order", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ADDRESS_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDRESS_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("ENTERPRISE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("NOTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PAYMENT_METHOD")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<decimal>("TOTAL_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TOTAL_QUANTITY")
                        .HasColumnType("int");

                    b.Property<decimal>("TOTAL_WEIGHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ADDRESS_ID");

                    b.HasIndex("ENTERPRISE_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("ORDER");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<int?>("CURRENCY")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("ORDER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PRODUCT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.Property<decimal?>("WEIGHT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ORDER_ID");

                    b.HasIndex("PRODUCT_ID");

                    b.ToTable("ORDER_PRODUCT");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.OrderTimeline", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("ORDER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TIME")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ORDER_ID");

                    b.ToTable("ORDER_TIMELINE");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.PackageMedia", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MEDIA_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MEDIA_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("PACKAGE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("PACKAGE_ID");

                    b.ToTable("PACKAGE_MEDIA");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Product", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<int?>("CURRENCY")
                        .HasColumnType("int");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ENTERPRISE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("PACKAGE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PRICE_FOR_REGISTERED")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<int?>("SOLD")
                        .HasColumnType("int");

                    b.Property<int?>("TYPE")
                        .HasColumnType("int");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.Property<decimal>("WEIGHT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ENTERPRISE_ID");

                    b.HasIndex("PACKAGE_ID")
                        .IsUnique()
                        .HasFilter("[PACKAGE_ID] IS NOT NULL");

                    b.ToTable("PRODUCT");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ProductMedia", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MEDIA_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MEDIA_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("PRODUCT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("PRODUCT_ID");

                    b.ToTable("PRODUCT_MEDIA");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CODE");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_ORDERED")
                        .HasColumnType("bit");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<decimal?>("TOTAL_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TOTAL_QUANTITY")
                        .HasColumnType("int");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("SHOPPING_CART");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserActivityComment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ACTIVITY_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("COMMENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_LIKE")
                        .HasColumnType("bit");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID");

                    b.HasIndex("ACTIVITY_ID", "USER_ID")
                        .IsUnique()
                        .HasFilter("[ACTIVITY_ID] IS NOT NULL AND [USER_ID] IS NOT NULL");

                    b.ToTable("USER_ACTIVITY_COMMENT");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserPackageReview", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ANSWER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COMMENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("PACKAGE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RATING")
                        .HasColumnType("int");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("PACKAGE_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("USER_PACKAGE_REVIEW");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserRegisterPackage", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<int?>("CURRENCY")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("PACKAGE_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("REGISTER_TIME")
                        .HasColumnType("datetime2");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("PACKAGE_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("USER_REGISTER_PACKAGE");
                });

            modelBuilder.Entity("SellerEnterprise", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ACCOUNT_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APPROVED_OR_REJECTED_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("APPROVED_OR_REJECTED_TIME")
                        .HasColumnType("datetime2");

                    b.Property<string>("AVATAR_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HOTLINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool?>("IS_APPROVED")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REJECT_REASON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TAX_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("ACCOUNT_ID")
                        .IsUnique()
                        .HasFilter("[ACCOUNT_ID] IS NOT NULL");

                    b.ToTable("SELLER_ENTERPRISE");
                });

            modelBuilder.Entity("UserAddress", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CREATED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_TIME");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<bool>("IS_DELETE")
                        .HasColumnType("bit")
                        .HasColumnName("IS_DELETE");

                    b.Property<bool>("IS_MAIN")
                        .HasColumnType("bit");

                    b.Property<string>("MODIFIED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("MODIFIED_TIME")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_TIME");

                    b.Property<string>("PHONE_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RECEIVER_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VERSION")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VERSION");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("USER_ADDRESS");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ActivityMedia", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackageActivity", "Activity")
                        .WithMany("ActivityMedias")
                        .HasForeignKey("ACTIVITY_ID");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.AccountVerify", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "RequestAccount")
                        .WithMany("AccountVerifies")
                        .HasForeignKey("ACCOUNT_ID");

                    b.Navigation("RequestAccount");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.RoleUser", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.Role", "RoleOfUser")
                        .WithMany("RoleUsers")
                        .HasForeignKey("ROLE_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "UserOfRole")
                        .WithMany("RoleUsers")
                        .HasForeignKey("USER_ID");

                    b.Navigation("RoleOfUser");

                    b.Navigation("UserOfRole");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.User", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "AccountInfo")
                        .WithOne("UserInfo")
                        .HasForeignKey("EcoFarm.Domain.Entities.Administration.User", "ACCOUNT_ID");

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.CartDetail", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.ShoppingCart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CART_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Product", "ProductInfo")
                        .WithMany("CartDetails")
                        .HasForeignKey("PRODUCT_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackage", b =>
                {
                    b.HasOne("SellerEnterprise", "Enterprise")
                        .WithMany("EnterpiseServicePackages")
                        .HasForeignKey("SELLER_ENTERPRISE_ID");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackageActivity", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackage", "Package")
                        .WithMany("Activities")
                        .HasForeignKey("PACKAGE_ID");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "FromAccount")
                        .WithMany("FromNotifications")
                        .HasForeignKey("FROM_ACCOUNT_ID");

                    b.Navigation("FromAccount");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.NotificationAccount", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Notification", "NotificationInfo")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NOTIFICATION_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "UserInfo")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("TO_ACCOUNT_ID");

                    b.Navigation("NotificationInfo");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Order", b =>
                {
                    b.HasOne("UserAddress", "AddressInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ADDRESS_ID");

                    b.HasOne("SellerEnterprise", "EnterpriseInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ENTERPRISE_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("Orders")
                        .HasForeignKey("USER_ID");

                    b.Navigation("AddressInfo");

                    b.Navigation("EnterpriseInfo");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Order", "OrderInfo")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ORDER_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Product", "ProductInfo")
                        .WithMany("OrderProducts")
                        .HasForeignKey("PRODUCT_ID");

                    b.Navigation("OrderInfo");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.OrderTimeline", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Order", "OrderInfo")
                        .WithMany("OrderTimelines")
                        .HasForeignKey("ORDER_ID");

                    b.Navigation("OrderInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.PackageMedia", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackage", "Package")
                        .WithMany("ServiceImages")
                        .HasForeignKey("PACKAGE_ID");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Product", b =>
                {
                    b.HasOne("SellerEnterprise", "Enterprise")
                        .WithMany("Products")
                        .HasForeignKey("ENTERPRISE_ID");

                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackage", "Package")
                        .WithOne("ProductInfo")
                        .HasForeignKey("EcoFarm.Domain.Entities.Product", "PACKAGE_ID");

                    b.Navigation("Enterprise");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ProductMedia", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Product", "OwnedProduct")
                        .WithMany("ProductMedias")
                        .HasForeignKey("PRODUCT_ID");

                    b.Navigation("OwnedProduct");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("USER_ID");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserActivityComment", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackageActivity", "Activity")
                        .WithMany("UserActivityComments")
                        .HasForeignKey("ACTIVITY_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("UserActivityComments")
                        .HasForeignKey("USER_ID");

                    b.Navigation("Activity");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserPackageReview", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackage", "Package")
                        .WithMany("UserReviews")
                        .HasForeignKey("PACKAGE_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("UserReviews")
                        .HasForeignKey("USER_ID");

                    b.Navigation("Package");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.UserRegisterPackage", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.FarmingPackage", "PackageInfo")
                        .WithMany("UserRegisterPackages")
                        .HasForeignKey("PACKAGE_ID");

                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("UserRegisterPackages")
                        .HasForeignKey("USER_ID");

                    b.Navigation("PackageInfo");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("SellerEnterprise", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.Account", "AccountInfo")
                        .WithOne("SellerEnterpriseInfo")
                        .HasForeignKey("SellerEnterprise", "ACCOUNT_ID");

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("UserAddress", b =>
                {
                    b.HasOne("EcoFarm.Domain.Entities.Administration.User", "UserInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("USER_ID");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.Account", b =>
                {
                    b.Navigation("AccountVerifies");

                    b.Navigation("FromNotifications");

                    b.Navigation("NotificationUsers");

                    b.Navigation("RoleUsers");

                    b.Navigation("SellerEnterpriseInfo");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.Role", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Administration.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("UserActivityComments");

                    b.Navigation("UserRegisterPackages");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackage", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ProductInfo");

                    b.Navigation("ServiceImages");

                    b.Navigation("UserRegisterPackages");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.FarmingPackageActivity", b =>
                {
                    b.Navigation("ActivityMedias");

                    b.Navigation("UserActivityComments");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderTimelines");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductMedias");
                });

            modelBuilder.Entity("EcoFarm.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("SellerEnterprise", b =>
                {
                    b.Navigation("EnterpiseServicePackages");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("UserAddress", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
